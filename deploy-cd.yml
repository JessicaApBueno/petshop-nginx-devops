---
- name: Deploy da Imagem NGINX Estática
  hosts: webservers
  become: yes # Necessário para rodar comandos de instalação e Docker
  gather_facts: no # Acelera o deploy, pois fatos serão coletados no passo 1

  vars:
    # Variáveis passadas pelo GitHub Actions
    docker_image_name: "{{ image_name }}"
    docker_pat: "{{ docker_hub_pat }}"
    docker_username: "{{ docker_hub_user }}"

  tasks:
    - name: 1. Esperar a VM iniciar e aceitar conexões SSH
      ansible.builtin.wait_for_connection:
        timeout: 300
        
    - name: 2. Instalar o Docker e dependências no Ubuntu
      ansible.builtin.apt:
        name: 
          - docker.io
          - python3-pip
        state: present
        update_cache: yes

    - name: 3. Instalar o módulo Docker para Python (Ansible precisa disso)
      ansible.builtin.pip:
        name: docker
        
    - name: 4. Adicionar usuário SSH ao grupo Docker (para rodar comandos Docker sem sudo)
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
        
    - name: 5. Fazer Login no Docker Hub (Usando Token PAT)
      community.docker.docker_login:
        registry_url: https://index.docker.io/v1/
        username: "{{ docker_username }}"
        password: "{{ docker_pat }}"

    - name: 6. Garantir que o Contêiner Antigo não esteja rodando (se estiver atualizando)
      community.docker.docker_container:
        name: petshop-nginx-prod
        state: absent
      ignore_errors: yes

    - name: 7. Puxar (pull) e Iniciar o Contêiner NGINX (DEPLOY FINAL)
      community.docker.docker_container:
        name: petshop-nginx-prod
        image: "{{ docker_image_name }}"
        state: started
        ports:
          - "80:80" # Mapeia a porta 80 do Servidor -> Porta 80 do Container
        restart_policy: always
